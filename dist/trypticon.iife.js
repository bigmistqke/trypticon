var trypticon=function(f){"use strict";function c(t,e,...r){const n=[];for(const o of r){if(typeof o=="number"){n.push(o);continue}if(o.length<e){if(t.strict)throw{values:r,message:`could not find index ${e} in array`};continue}n.push(o[e])}return n}const p=(t,e,...r)=>{const n=r.find(o=>typeof o=="object");if(!n)throw{values:r,message:"could not find objay"};return Object.fromEntries(Object.keys(n).map(o=>[o,s(t,e,...c(t,o,...r))]))},a=(t,e,...r)=>{const n=r.find(o=>Array.isArray(o));if(!n)throw{values:r,message:"could not find array"};return n.map((o,i)=>s(t,e,...c(t,i,...r)))},u=(t,e,...r)=>{let n=r.shift();if(!n)throw{values:r,message:"result[0] is undefined"};let o=0;for(const i of r)n=e(n,i,o,t),o++;return n},l=(...t)=>{const e=t.find(r=>typeof r!==void 0);return Array.isArray(e)?"array":typeof e},s=(t,e,...r)=>{switch(l(...r)){case void 0:throw"Values are not valid";case"object":return p(t,e,...r);case"array":return a(t,e,...r);case"number":return u(t,e,...r);case"string":return u(t,e,...r);default:return r[0]}},b=["strict","string"],g=t=>{if(typeof t!="object")return!1;for(const e in t)if(!b.includes(e))return!1;return t},m={strict:!0,string:!1},y=(t,e,r,n)=>typeof t=="string"||typeof t=="number"&&typeof e=="number"?t+e:t;function h(t,...e){try{if(e.length===0){const r=g(t);return r?(n,o,...i)=>s(r,y,n,o,...i):void 0}else return s(m,y,t,...e)}catch(r){return console.error(r),!1}}const O={strict:!0},j=t=>{if(typeof t!="object")return!1;const e=["strict"];let r;for(r in t)if(!e.includes(r))return!1;return t},d=(t,e,r,n)=>typeof t=="number"&&typeof e=="number"?t*e:t;function A(t,...e){try{if(e.length===0){const r=j(t);return r?(n,o,...i)=>s(r,d,n,o,...i):void 0}else return s(O,d,t,...e)}catch(r){return console.error(r),!1}}return f.multiply=A,f.sum=h,Object.defineProperty(f,Symbol.toStringTag,{value:"Module"}),f}({});
