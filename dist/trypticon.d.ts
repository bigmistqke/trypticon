// Generated by dts-bundle-generator v7.2.0

export interface ObjectType {
	[key: string]: any;
}
export type ArrayType = any[];
export type ValueType = string | number;
export type AcceptedTypes = ObjectType | ArrayType | ValueType;
declare const sumOptions: readonly [
	"strict",
	"string"
];
export type SumOptions = {
	[K in (typeof sumOptions)[number]]?: boolean;
};
export declare function sum<T extends AcceptedTypes>(options: SumOptions): (a: T | number, b: T | number, ...values: (T | number)[]) => void;
export declare function sum<T extends AcceptedTypes>(a: T | number, b: T | number, ...values: (T | number)[]): T;
declare const multiplyOptions: readonly [
	"strict"
];
export type MultiplyOptions = {
	[K in (typeof multiplyOptions)[number]]: boolean;
};
export declare function multiply<T extends AcceptedTypes>(options: MultiplyOptions): (a: T | number, b: T | number, ...values: (T | number)[]) => T;
export declare function multiply<T extends AcceptedTypes>(a: T | number, b: T | number, ...values: (T | number)[]): T;

export {};
